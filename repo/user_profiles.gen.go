// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"Douyin_Demo/model"
)

func newUserProfile(db *gorm.DB, opts ...gen.DOOption) userProfile {
	_userProfile := userProfile{}

	_userProfile.userProfileDo.UseDB(db, opts...)
	_userProfile.userProfileDo.UseModel(&model.UserProfile{})

	tableName := _userProfile.userProfileDo.TableName()
	_userProfile.ALL = field.NewAsterisk(tableName)
	_userProfile.ID = field.NewUint(tableName, "id")
	_userProfile.CreatedAt = field.NewTime(tableName, "created_at")
	_userProfile.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userProfile.DeletedAt = field.NewField(tableName, "deleted_at")
	_userProfile.UserId = field.NewInt64(tableName, "user_id")
	_userProfile.Name = field.NewString(tableName, "name")
	_userProfile.Avatar = field.NewString(tableName, "avatar")
	_userProfile.BackgroundImage = field.NewString(tableName, "background_image")
	_userProfile.Signature = field.NewString(tableName, "signature")

	_userProfile.fillFieldMap()

	return _userProfile
}

type userProfile struct {
	userProfileDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	UserId          field.Int64
	Name            field.String
	Avatar          field.String
	BackgroundImage field.String
	Signature       field.String

	fieldMap map[string]field.Expr
}

func (u userProfile) Table(newTableName string) *userProfile {
	u.userProfileDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userProfile) As(alias string) *userProfile {
	u.userProfileDo.DO = *(u.userProfileDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userProfile) updateTableName(table string) *userProfile {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserId = field.NewInt64(table, "user_id")
	u.Name = field.NewString(table, "name")
	u.Avatar = field.NewString(table, "avatar")
	u.BackgroundImage = field.NewString(table, "background_image")
	u.Signature = field.NewString(table, "signature")

	u.fillFieldMap()

	return u
}

func (u *userProfile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userProfile) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserId
	u.fieldMap["name"] = u.Name
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["background_image"] = u.BackgroundImage
	u.fieldMap["signature"] = u.Signature
}

func (u userProfile) clone(db *gorm.DB) userProfile {
	u.userProfileDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userProfile) replaceDB(db *gorm.DB) userProfile {
	u.userProfileDo.ReplaceDB(db)
	return u
}

type userProfileDo struct{ gen.DO }

type IUserProfileDo interface {
	gen.SubQuery
	Debug() IUserProfileDo
	WithContext(ctx context.Context) IUserProfileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserProfileDo
	WriteDB() IUserProfileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserProfileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserProfileDo
	Not(conds ...gen.Condition) IUserProfileDo
	Or(conds ...gen.Condition) IUserProfileDo
	Select(conds ...field.Expr) IUserProfileDo
	Where(conds ...gen.Condition) IUserProfileDo
	Order(conds ...field.Expr) IUserProfileDo
	Distinct(cols ...field.Expr) IUserProfileDo
	Omit(cols ...field.Expr) IUserProfileDo
	Join(table schema.Tabler, on ...field.Expr) IUserProfileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserProfileDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserProfileDo
	Group(cols ...field.Expr) IUserProfileDo
	Having(conds ...gen.Condition) IUserProfileDo
	Limit(limit int) IUserProfileDo
	Offset(offset int) IUserProfileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProfileDo
	Unscoped() IUserProfileDo
	Create(values ...*model.UserProfile) error
	CreateInBatches(values []*model.UserProfile, batchSize int) error
	Save(values ...*model.UserProfile) error
	First() (*model.UserProfile, error)
	Take() (*model.UserProfile, error)
	Last() (*model.UserProfile, error)
	Find() ([]*model.UserProfile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProfile, err error)
	FindInBatches(result *[]*model.UserProfile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserProfile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserProfileDo
	Assign(attrs ...field.AssignExpr) IUserProfileDo
	Joins(fields ...field.RelationField) IUserProfileDo
	Preload(fields ...field.RelationField) IUserProfileDo
	FirstOrInit() (*model.UserProfile, error)
	FirstOrCreate() (*model.UserProfile, error)
	FindByPage(offset int, limit int) (result []*model.UserProfile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserProfileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByRoles(rolesName []string) (result []*model.UserProfile, err error)
}

// GetByRoles query data by roles and return it as *slice of pointer*
//
//	 (The below blank line is required to comment for the generated method)
//		//
//
// SELECT * FROM @@table WHERE role IN @rolesName
func (u userProfileDo) GetByRoles(rolesName []string) (result []*model.UserProfile, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("query data by roles and return it as *slice of pointer* (The below blank line is required to comment for the generated method) // SELECT * FROM user_profiles WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userProfileDo) Debug() IUserProfileDo {
	return u.withDO(u.DO.Debug())
}

func (u userProfileDo) WithContext(ctx context.Context) IUserProfileDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userProfileDo) ReadDB() IUserProfileDo {
	return u.Clauses(dbresolver.Read)
}

func (u userProfileDo) WriteDB() IUserProfileDo {
	return u.Clauses(dbresolver.Write)
}

func (u userProfileDo) Session(config *gorm.Session) IUserProfileDo {
	return u.withDO(u.DO.Session(config))
}

func (u userProfileDo) Clauses(conds ...clause.Expression) IUserProfileDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userProfileDo) Returning(value interface{}, columns ...string) IUserProfileDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userProfileDo) Not(conds ...gen.Condition) IUserProfileDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userProfileDo) Or(conds ...gen.Condition) IUserProfileDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userProfileDo) Select(conds ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userProfileDo) Where(conds ...gen.Condition) IUserProfileDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userProfileDo) Order(conds ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userProfileDo) Distinct(cols ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userProfileDo) Omit(cols ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userProfileDo) Join(table schema.Tabler, on ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userProfileDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userProfileDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userProfileDo) Group(cols ...field.Expr) IUserProfileDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userProfileDo) Having(conds ...gen.Condition) IUserProfileDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userProfileDo) Limit(limit int) IUserProfileDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userProfileDo) Offset(offset int) IUserProfileDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userProfileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProfileDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userProfileDo) Unscoped() IUserProfileDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userProfileDo) Create(values ...*model.UserProfile) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userProfileDo) CreateInBatches(values []*model.UserProfile, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userProfileDo) Save(values ...*model.UserProfile) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userProfileDo) First() (*model.UserProfile, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfile), nil
	}
}

func (u userProfileDo) Take() (*model.UserProfile, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfile), nil
	}
}

func (u userProfileDo) Last() (*model.UserProfile, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfile), nil
	}
}

func (u userProfileDo) Find() ([]*model.UserProfile, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserProfile), err
}

func (u userProfileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProfile, err error) {
	buf := make([]*model.UserProfile, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userProfileDo) FindInBatches(result *[]*model.UserProfile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userProfileDo) Attrs(attrs ...field.AssignExpr) IUserProfileDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userProfileDo) Assign(attrs ...field.AssignExpr) IUserProfileDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userProfileDo) Joins(fields ...field.RelationField) IUserProfileDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userProfileDo) Preload(fields ...field.RelationField) IUserProfileDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userProfileDo) FirstOrInit() (*model.UserProfile, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfile), nil
	}
}

func (u userProfileDo) FirstOrCreate() (*model.UserProfile, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProfile), nil
	}
}

func (u userProfileDo) FindByPage(offset int, limit int) (result []*model.UserProfile, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userProfileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userProfileDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userProfileDo) Delete(models ...*model.UserProfile) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userProfileDo) withDO(do gen.Dao) *userProfileDo {
	u.DO = *do.(*gen.DO)
	return u
}
